#Provisions the infra creation requests on Google Cloud Platform

name: Provision the Infrastructure

on:
# Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

permissions:
    contents: read
    id-token: write

jobs:
  # This workflow contains a single job called "build"
  process_infra_provisioning_request:
    # The type of runner that the job will run on
    runs-on: ubuntu-24.04
    permissions:
        contents: read
        id-token: write
    environment: PROCTOR_ENV

    steps:

      # Select all lines and do CTRL + / to comment-uncomment

        - name: Get request details from DB & store it in Shell variables
          id: post_data
          run: |
            echo "ID=$(curl http://"${{ secrets.POSTGRES_IP }}"/PENDINGINFRACREATION | jq -r ".[0].id")" >> $GITHUB_OUTPUT
            echo "COMPONENTS=$(curl http://"${{ secrets.POSTGRES_IP }}"/PENDINGINFRACREATION | jq -r ".[0].components")" >> $GITHUB_OUTPUT
            echo "RESOURCE_EXPIRY_TIME=$(curl http://"${{ secrets.POSTGRES_IP }}"/PENDINGINFRACREATION | jq -r ".[0].expirytime")" >> $GITHUB_OUTPUT

        - name: Capture Job Start Time
          id: start
          if: ${{ steps.post_data.outputs.ID != '' }}
          run: |
            echo "JOBSTARTTIME=$(date --utc --iso-8601=seconds)" >> $GITHUB_OUTPUT
            echo ${{ steps.post_data.outputs.ID }}

        # - name: Clone the TF templates directory
        #   uses: actions/checkout@v2

        # - id: auth
        #   name: Authenticate To Google Cloud
        #   uses: google-github-actions/auth@v2
        #   with:
        #     workload_identity_provider: 'projects/351592443/locations/global/workloadIdentityPools/identity-pool-2/providers/da-idp'
        #     service_account: '${{ secrets.SERVICE_ACCOUNT }}'
        #     project_id: '${{ secrets.PROJECT_ID }}'


        # - name: Setup Cloud SDK
        #   uses: google-github-actions/setup-gcloud@v2
  
        # - name: Use gcloud CLI
        #   run: gcloud info

        # - name: Setup Terraform
        #   uses: hashicorp/setup-terraform@v2
        #   with:
        #     terraform_version: 1.7.5

        # - name: Get request details from DB & store it in Shell variables
        #   id: post_data
        #   run: |
        #     echo "ID=$(curl http://"${{ secrets.POSTGRES_IP }}"/PENDINGINFRACREATION | jq -r ".[0].id")" >> $GITHUB_OUTPUT
        #     echo "COMPONENTS=$(curl http://"${{ secrets.POSTGRES_IP }}"/PENDINGINFRACREATION | jq -r ".[0].components")" >> $GITHUB_OUTPUT
        #     echo "RESOURCE_EXPIRY_TIME=$(curl http://"${{ secrets.POSTGRES_IP }}"/PENDINGINFRACREATION | jq -r ".[0].expirytime")" >> $GITHUB_OUTPUT
            
        # - name: Prepare terraform files
        #   run: |
        #     echo ${{ steps.post_data.outputs.ID }}
        #     cd terraform_templates
        #     IFS=','
        #     read -ra mod_array <<< ${{ steps.post_data.outputs.COMPONENTS }}
        #     for element in "${mod_array[@]}"; do
        #       cat references/"$element".txt >> main.tf
        #     done         

        #     sed -i "s/STAGING_BUCKET/"${{ secrets.STAGING_BUCKET }}"/g" main.tf
        #     sed -i "s/REQUEST_ID/"${{ steps.post_data.outputs.ID }}"/g" main.tf
        #     sed -i "s/SERVICE_ACCOUNT/"${{ secrets.SERVICE_ACCOUNT }}"/g" terraform.tfvars
        #     sed -i "s/PROJECT_ID/"${{ secrets.PROJECT_ID }}"/g" terraform.tfvars
        #     sed -i "s/REGION/"${{ vars.REGION_ROOT }}"/g" terraform.tfvars
        #     sed -i "s/ZONE/"${{ vars.ZONE_ROOT }}"/g" terraform.tfvars
        #     sed -i "s/REQUEST_ID/"${{ steps.post_data.outputs.ID }}"/g" terraform.tfvars
        #     sed -i "s%COMPUTE_IMAGE%"${{ vars.COMPUTE_IMAGE }}"%g" terraform.tfvars
        #     sed -i "s/COMPUTE_MACHINE_TYPE/"${{ vars.COMPUTE_MACHINE_TYPE }}"/g" terraform.tfvars


        # - name: Apply Terraform
        #   id: tf
        #   run: |
        #     cd terraform_templates
        #     cat main.tf
        #     terraform init
        #     terraform validate
        #     terraform plan
        #     terraform apply -auto-approve

        # - name: Output the Results
        #   id: output
        #   run: |
        #     cd terraform_templates
        #     BUCKET_NAME=$(terraform-bin output -json | jq -r ".BucketAll.value.bucket_result")
        #     HOSTNAME=$(terraform-bin output -json | jq -r ".ComputeAll.value.Result_2_hostname")
        #     EXT_IP=$(terraform-bin output -json | jq -r ".ComputeAll.value.Result_4_Network_IP_EXT")
        #     USERNAME=$(terraform-bin output -json | jq -r ".ComputeAll.value.Result_5_UserName")
        #     CONNECTIONSTRING=$(terraform-bin output -json | jq -r ".ComputeAll.value.Result_6_ConnectionString")
        #     curl "http://"${{ secrets.POSTGRES_IP }}"/PROVISIONEDINFRA" -X POST -H "Content-Type: application/json"  -d "{\"id\": \"${{ steps.post_data.outputs.ID }}\", \"jobstarttime\": \"${{ steps.start.outputs.JOBSTARTTIME }}\", \"jobendtime\": \"$(date --utc --iso-8601=seconds)\" , \"joboutput\": \"${BUCKET_NAME},${HOSTNAME},${EXT_IP},${USERNAME},${CONNECTIONSTRING}\",\"resourceexpirytime\":\"${{ steps.post_data.outputs.RESOURCE_EXPIRY_TIME }}\"}"
            








